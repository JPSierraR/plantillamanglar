<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mapa con Marcas</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.7.1/dist/leaflet.css" />
  <script src="https://cdn.jsdelivr.net/npm/leaflet@1.7.1/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
  <style>
    #map { height: 400px; }
  </style>
</head>
<body>
  
  <h1>Mapa con Marcas</h1>
  
  <div>
    <label for="latitude">Latitud:</label>
    <input type="text" id="latitude">
    <label for="longitude">Longitud:</label>
    <input type="text" id="longitude">
    <label for="species">Especie:</label>
    <input type="text" id="species">
    <button id="addButton">Agregar Marca</button>
    <button id="clearButton">Borrar Marcas</button>
  </div>

  <div id="map"></div>
  
  <h2 id="counter">Número de Árboles Registrados en el Campus: 0</h2>
  
  <canvas id="pieChartCanvas"></canvas>

  <script>
    // Crear el mapa
    const map = L.map('map').setView([9.316243821216903, -75.38878550707672], 16);

    // Agregar el mapa base de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Capa de marcadores para agregar las marcas al mapa
    const markersLayer = L.layerGroup().addTo(map);

    // Objeto para realizar el seguimiento de la cantidad de especies
    let speciesCount = {};

    // Variable para almacenar la instancia del gráfico de pastel
    let pieChart;

    // Cargar las marcas guardadas desde el almacenamiento local
    function loadMarkersFromStorage() {
      const markers = JSON.parse(localStorage.getItem('markers')) || [];

      markers.forEach(function (markerData) {
        const { latitude, longitude, species } = markerData;
        addMarker(latitude, longitude, species);
      });
    }

    // Guardar una marca en el almacenamiento local
    function saveMarkerToStorage(latitude, longitude, species) {
      const markerData = { latitude, longitude, species };
      const markers = JSON.parse(localStorage.getItem('markers')) || [];

      markers.push(markerData);
      localStorage.setItem('markers', JSON.stringify(markers));
    }

    // Función para agregar una marca al mapa
    function addMarker(latitude, longitude, species) {
      const marker = L.marker([latitude, longitude]).addTo(markersLayer);

      // Actualizar el contador de especies
      speciesCount[species] = (speciesCount[species] || 0) + 1;

      // Actualizar la tabla de especies
      updatePieChart();

      // Actualizar el contador de marcas
      updateCounter();

      // Guardar la marca en el almacenamiento local
      saveMarkerToStorage(latitude, longitude, species);
    }

    // Eliminar todas las marcas del mapa y del almacenamiento local
    function clearMarkers() {
      markersLayer.clearLayers();
      localStorage.removeItem('markers');
      speciesCount = {};
      updatePieChart();
      updateCounter();
    }

    // Actualizar el gráfico de pastel
    function updatePieChart() {
      const canvas = document.getElementById('pieChartCanvas');

      if (pieChart) {
        pieChart.destroy();
      }

      const species = Object.keys(speciesCount);
      const counts = Object.values(speciesCount);

      pieChart = new Chart(canvas, {
        type: 'pie',
        data: {
          labels: species,
          datasets: [{
            data: counts,
            backgroundColor: getRandomColors(species.length),
          }],
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'bottom',
            },
          },
        },
      });
    }

    // Generar colores aleatorios para los segmentos del gráfico
    function getRandomColors(count) {
      const colors = [];

      for (let i = 0; i < count; i++) {
        const color = `rgba(${getRandomValue(0, 255)}, ${getRandomValue(0, 255)}, ${getRandomValue(0, 255)}, 0.7)`;
        colors.push(color);
      }

      return colors;
    }

    // Generar un valor aleatorio en un rango dado
    function getRandomValue(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Función para actualizar el contador de marcas
    function updateCounter() {
      const counter = document.getElementById('counter');
      const totalCount = Object.values(speciesCount).reduce((total, count) => total + count, 0);
      counter.textContent = `Número de Árboles Registrados en el Campus: ${totalCount}`;
    }

    // Manejar el evento de carga de la página
    window.addEventListener('load', function () {
      loadMarkersFromStorage();
    });

    // Manejar el evento de clic en el botón "Agregar Marca"
    document.getElementById('addButton').addEventListener('click', function () {
      const latitude = parseFloat(document.getElementById('latitude').value);
      const longitude = parseFloat(document.getElementById('longitude').value);
      const species = document.getElementById('species').value;

      if (isNaN(latitude) || isNaN(longitude) || species === '') {
        alert('Por favor, ingresa valores válidos para latitud, longitud y especie.');
        return;
      }

      addMarker(latitude, longitude, species);

      // Limpiar los campos del formulario
      document.getElementById('latitude').value = '';
      document.getElementById('longitude').value = '';
      document.getElementById('species').value = '';
    });

    // Manejar el evento de clic en el botón "Borrar Marcas"
    document.getElementById('clearButton').addEventListener('click', function () {
      clearMarkers();
    });
  </script>
</body>
</html>

